service: encouragement-now-api

plugins:
    - serverless-offline
    - serverless-plugin-optimize
    - serverless-plugin-typescript
    - serverless-dotenv-plugin

provider:
    name: aws
    runtime: nodejs12.x
    stage: dev
    region: us-west-2

custom:
    dotenv:
        path: ./.env
        logging: false
        include:
            - ACCOUNT_SID
            - AUTH_TOKEN
            - GIPHY_KEY
            - PHONE_NUMBER

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
    hello:
        handler: src/lambdas/hello/handler.hello
        events:
            - http:
                  path: hello
                  method: get
                  integration: lambda-proxy
    sendText:
        handler: src/lambdas/sendText/handler.handler
        events:
            - http:
                  path: sendtext
                  method: post
                  integration: lambda-proxy
        environment:
            ACCOUNT_SID: ${env:ACCOUNT_SID}
            AUTH_TOKEN: ${env:AUTH_TOKEN}
            GIPHY_KEY: ${env:GIPHY_KEY}
            PHONE_NUMBER: ${env:PHONE_NUMBER}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

